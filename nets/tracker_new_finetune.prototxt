name: "CaffeNet"

input: "target"
input: "candidate"
input: "rois"
input: "label"

#target
input_dim: 1
input_dim: 3
input_dim: 107
input_dim: 107

#candidate, full image, size W, H to be changed on the fly
input_dim: 1
input_dim: 3
input_dim: 107
input_dim: 107

#rois
input_dim: 1
input_dim: 5
input_dim: 1
input_dim: 1

#label
input_dim: 1
input_dim: 1
input_dim: 1
input_dim: 1

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "target"
  top: "conv1"
  param {
  	name: "conv1_w"
    lr_mult: 0
    decay_mult: 1
  }
  param {
  	name: "conv1_b"
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "norm1"
  type: "LRN"
  bottom: "conv1"
  top: "norm1"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2"
  type: "Convolution"
  bottom: "norm1"
  top: "conv2"
  param {
  	name: "conv2_w"
    lr_mult: 0
    decay_mult: 1
  }
  param {
  	name: "conv2_b"
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2"
  type: "ReLU"
  bottom: "conv2"
  top: "conv2"
}
layer {
  name: "norm2"
  type: "LRN"
  bottom: "conv2"
  top: "norm2"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3"
  type: "Convolution"
  bottom: "norm2"
  top: "conv3"
  param {
  	name: "conv3_w"
    lr_mult: 0
    decay_mult: 1
  }
  param {
  	name: "conv3_b"
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3"
  type: "ReLU"
  bottom: "conv3"
  top: "conv3"
}
layer {
  name: "conv4"
  type: "Convolution"
  bottom: "conv3"
  top: "conv4"
  param {
  	name: "conv4_w"
    lr_mult: 0
    decay_mult: 1
  }
  param {
  	name: "conv4_b"
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4"
  type: "ReLU"
  bottom: "conv4"
  top: "conv4"
}
layer {
  name: "conv5"
  type: "Convolution"
  bottom: "conv4"
  top: "conv5"
  param {
  	name: "conv5_w"
    lr_mult: 0
    decay_mult: 1
  }
  param {
  	name: "conv5_b"
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5"
  type: "ReLU"
  bottom: "conv5"
  top: "conv5"
}

layer {
  name: "pool6"
  type: "Pooling"
  bottom: "conv5"
  top: "pool6"
  pooling_param {
    pool: AVE
    kernel_size: 5
    stride: 4 # result in 6 x 6 feature map, TODO, try 3x3
  }
}


layer {
  name: "conv1_c"
  type: "Convolution"
  bottom: "candidate"
  top: "conv1_c"
  param {
  	name: "conv1_w"
    lr_mult: 0
    decay_mult: 1
  }
  param {
  	name: "conv1_b"
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 96
    kernel_size: 11
    stride: 4
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu1_c"
  type: "ReLU"
  bottom: "conv1_c"
  top: "conv1_c"
}

layer {
  name: "norm1_c"
  type: "LRN"
  bottom: "conv1_c"
  top: "norm1_c"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv2_c"
  type: "Convolution"
  bottom: "norm1_c"
  top: "conv2_c"
  param {
  	name: "conv2_w"
    lr_mult: 0
    decay_mult: 1
  }
  param {
  	name: "conv2_b"
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 2
    kernel_size: 5
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu2_c"
  type: "ReLU"
  bottom: "conv2_c"
  top: "conv2_c"
}

layer {
  name: "norm2_c"
  type: "LRN"
  bottom: "conv2_c"
  top: "norm2_c"
  lrn_param {
    local_size: 5
    alpha: 0.0001
    beta: 0.75
  }
}
layer {
  name: "conv3_c"
  type: "Convolution"
  bottom: "norm2_c"
  top: "conv3_c"
  param {
  	name: "conv3_w"
    lr_mult: 0
    decay_mult: 1
  }
  param {
  	name: "conv3_b"
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "relu3_c"
  type: "ReLU"
  bottom: "conv3_c"
  top: "conv3_c"
}
layer {
  name: "conv4_c"
  type: "Convolution"
  bottom: "conv3_c"
  top: "conv4_c"
  param {
  	name: "conv4_w"
    lr_mult: 0
    decay_mult: 1
  }
  param {
  	name: "conv4_b"
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 384
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu4_c"
  type: "ReLU"
  bottom: "conv4_c"
  top: "conv4_c"
}
layer {
  name: "conv5_c"
  type: "Convolution"
  bottom: "conv4_c"
  top: "conv5_c"
  param {
  	name: "conv5_w"
    lr_mult: 0
    decay_mult: 1
  }
  param {
  	name: "conv5_b"
    lr_mult: 0
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    pad: 1
    kernel_size: 3
    group: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu5_c"
  type: "ReLU"
  bottom: "conv5_c"
  top: "conv5_c"
}
layer {
  name: "roi_pool5_c"
  type: "ROIPooling"
  bottom: "conv5_c"
  bottom: "rois"
  top: "roi_pool5_c"
  roi_pooling_param {
    pooled_w: 25
    pooled_h: 25
    spatial_scale: 0.25 # 1/4
  }
}

layer {
  name: "pool6_c"
  type: "Pooling"
  bottom: "roi_pool5_c"
  top: "pool6_c"
  pooling_param {
    pool: AVE
    kernel_size: 5
    stride: 4 # result in 6 x 6 feature map, TODO, try 3x3
  }
}

layer {
  name: "concat"
  type: "Concat"
  bottom: "pool6"
  bottom: "pool6_c"
  top: "pool5_concat"
  concat_param {
    axis: 1
  }
}

layer {
  name: "fc6-gmd"
  type: "InnerProduct"
  bottom: "pool5_concat"
  top: "fc6"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu6"
  type: "ReLU"
  bottom: "fc6"
  top: "fc6"
}
layer {
  name: "drop6"
  type: "Dropout"
  bottom: "fc6"
  top: "fc6"
  dropout_param {
    dropout_ratio: 0.5
  }
}
layer {
  name: "fc7-gmd"
  type: "InnerProduct"
  bottom: "fc6"
  top: "fc7"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  inner_product_param {
    num_output: 256
    weight_filler {
      type: "gaussian"
      std: 0.005
    }
    bias_filler {
      type: "constant"
      value: 1
    }
  }
}
layer {
  name: "relu7"
  type: "ReLU"
  bottom: "fc7"
  top: "fc7"
}
layer {
  name: "drop7"
  type: "Dropout"
  bottom: "fc7"
  top: "fc7"
  dropout_param {
    dropout_ratio: 0.5
  }
}

# flatten label
layer {
  name: "flatten"
  type: "Flatten"
  bottom: "label"
  top: "label_flat"
}

# One Domain for online testing
layer {
  name: "fc8"  
  type: "InnerProduct"  
  bottom: "fc7"  
  top: "fc8"  
  param {
    lr_mult: 10 
    decay_mult: 1 
  }
  param {
    lr_mult: 20 
    decay_mult: 0 
  }
  inner_product_param {
    num_output: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}

# loss for finetuning
layer {
  name: "prob"
  type: "Softmax"
  bottom: "fc8"
  top: "prob"
  include { phase: TEST }
}

layer {
  name: "loss"
  type: "SoftmaxWithLoss"
  bottom: "fc8"
  bottom: "label_flat"
  top: "loss"
  include { phase: TRAIN }
}